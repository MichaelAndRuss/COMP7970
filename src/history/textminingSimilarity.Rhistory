q()
q()
setwd("C:\\Teaching\\COMP 7970\\Data")
library(tm)
corpus = Corpus(VectorSource(readLines('hotel.txt'))
)
length(corpus)
as.character(corpus[[1]])
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePuntuation)
corpus = tm_map(corpus, removePunctuation)
as.character(corpus[[1]])
corpus = tm_map(corpus, content_tranformer(tolower))
corpus = tm_map(corpus, content.tranformer(tolower))
corpus = tm_map(corpus, content.transformer(tolower))
corpus = tm_map(corpus, content_transformer(tolower))
length(corpus)
as.character(corpus[[10]])
corpus = tm_map(corpus, removeWords, stopwords('english'))
as.character(corpus[[10]])
corpus = tm_map(corpus, stemDocument)
as.character(corpus[[10]])
mat = TermDocumentMatrix(corpus)
summary(mat)
mat
matr = as.matrix(mat)
dims(matr)
dim(matr)
matr[1:10, 1:5]
doc.freq = rowSums(matr > 0)
doc.freq[1:10]
tf.idf = log(matr + 1) * log(ncol(matr)/doc.freq)
tf.idf[1:10, 1:5]
log(632/2)
log(1+1)
0.6931472 * 5.755742
sim = function(query, doc) {
n = length(query)
sump = 0
sumq = 0
sumd = 0
for (i in 1:n) {
sump = sump + query[i] * doc[i]
sumq = sumq + query[i]^2
sumd = sumd + doc[i]^2
} 
sump/(sqrt(sumq) * sqrt(sumd))
}
query = rep(0, 1774)
idf = log(ncol(matr)/doc.freq))
idf = log(ncol(matr)/doc.freq)
idf
words = names(idf)
words[4]
words[5]
?match
which('fire', words)
?which
which('fire' == words)
which(c('fire','word') == words)
which(c('fire','food') == words)
sim.doc = function(query, idf, tf.idf) {
words = names(idf)
sim = rep(0, ncol(tf.idf))
for (d in 1:ncol(tf.idf)) # go to each document
{
sump = 0
sumq = 0
    sumd = sum(tf.idf[,d]^2)
for (i in 1:length(query) {
j = which(query[i] == words)# search for this term
sump = sump + idf[j] * tf.idf[j, d]
    sumq = sumq + idf[j]^2
} 
sim[d] = sump/(sqrt(sumq) * sqrt(sumd))
}
sim
sim.doc = function(query, idf, tf.idf) {
words = names(idf)
sim = rep(0, ncol(tf.idf))
for (d in 1:ncol(tf.idf)) # go to each document
{
sump = 0
sumq = 0
    sumd = sum(tf.idf[,d]^2)
for (i in 1:length(query)) {
j = which(query[i] == words)# search for this term
sump = sump + idf[j] * tf.idf[j, d]
    sumq = sumq + idf[j]^2
} 
sim[d] = sump/(sqrt(sumq) * sqrt(sumd))
}
sim
}
sim = sim.doc(c("fire", 'food'), idf, tf.idf)
sim
which.max(sim)
which('paradise' == words)
which('paradis' == words)
sim = sim.doc(c('paradis', 'food'), idf, tf.idf)
which.max(sim)
sim
as.character[78]
as.character(corpus[[78]])
sim = sim.doc(c('love', 'food'), idf, tf.idf)
which.max(sim)
as.character(corpus[[497]])
sim = sim.doc(c('room', 'food'), idf, tf.idf)
which.max(sim)
as.character(corpus[[270]])
